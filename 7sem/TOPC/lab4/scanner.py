import numpy

regex = numpy.array([
    [1, 11, 802, 802, 805, 11, 805, 805, 805, 805, 805, 11, 802, 803, 803, 803, 803, 803, 803, 803, 803, 804],
    [11, 2, 802, 802, 805, 11, 805, 805, 9, 805, 805, 11, 802, 803, 803, 803, 803, 803, 803, 803, 803, 804],
    [11, 11, 3, 802, 805, 6, 805, 805, 805, 805, 805, 11, 802, 803, 803, 803, 803, 803, 803, 803, 803, 804],
    [11, 11, 802, 4, 805, 11, 805, 805, 805, 805, 805, 11, 802, 803, 803, 803, 803, 803, 803, 803, 803, 804],
    [5, 11, 802, 802, 805, 11, 805, 805, 805, 805, 805, 11, 802, 803, 803, 803, 803, 803, 803, 803, 803, 804],
    [11, 11, 802, 802, 805, 11, 7, 805, 805, 805, 805, 11, 802, 803, 803, 803, 803, 803, 803, 803, 803, 804],
    [11, 11, 802, 802, 805, 11, 805, 8, 805, 805, 805, 11, 802, 803, 803, 803, 803, 803, 803, 803, 803, 804],
    [11, 11, 802, 802, 805, 11, 805, 805, 805, 10, 805, 11, 802, 803, 803, 803, 803, 803, 803, 803, 803, 804],
    [11, 11, 802, 802, 805, 11, 805, 805, 805, 805, 805, 11, 802, 803, 803, 803, 803, 803, 803, 803, 803, 804],
    [801, 12, 802, 802, 805, 12, 805, 805, 805, 805, 805, 12, 802, 803, 803, 803, 803, 803, 803, 803, 803, 804],
    [11, 11, 802, 802, 805, 11, 805, 805, 805, 805, 805, 11, 802, 14, 15, 16, 803, 18, 19, 20, 803, 804],
    [501, 300, 802, 802, 100, 802, 805, 802, 802, 802, 200, 802, 300, 803, 803, 803, 803, 803, 803, 803, 400, 804],
    [502, 300, 802, 802, 100, 802, 805, 802, 802, 802, 200, 802, 300, 803, 803, 803, 803, 803, 803, 803, 400, 804],
    [503, 300, 802, 802, 100, 802, 805, 802, 802, 802, 200, 802, 300, 803, 803, 803, 803, 803, 803, 803, 400, 804],
    [504, 300, 802, 802, 100, 802, 805, 802, 802, 802, 200, 802, 300, 803, 803, 803, 803, 803, 803, 803, 400, 508],
    [505, 300, 802, 802, 100, 802, 805, 802, 802, 802, 200, 802, 300, 803, 803, 803, 803, 803, 803, 803, 400, 804],
    [506, 300, 802, 802, 100, 802, 805, 802, 802, 802, 200, 802, 300, 803, 803, 803, 803, 803, 803, 803, 400, 804],
    [801, 802, 802, 802, 100, 802, 805, 802, 802, 802, 200, 802, 300, 803, 803, 803, 17, 803, 803, 803, 400, 804],
    [21, 300, 802, 802, 100, 802, 805, 802, 802, 802, 200, 802, 300, 803, 803, 803, 803, 803, 803, 803, 400, 804],
    [600, 300, 802, 802, 100, 802, 805, 802, 802, 802, 200, 802, 300, 803, 803, 803, 803, 803, 803, 803, 400, 804]
])

def execute():
    test_sequence = open("data.txt", "r").read().replace('\n', '')
    node = 0
    i = 0
    repeat_place = 0
    result = ''
    while i < len(test_sequence):
        symbol = test_sequence[i]
        symbol = symbol.upper()
        
        if symbol.isalpha():
            match symbol:
                case 'W':
                    node = regex[0][node]
                case 'A':
                    node = regex[1][node]
                case 'I':
                    node = regex[2][node]
                case 'T':
                    node = regex[3][node]
                case 'S':
                    node = regex[4][node]
                case 'G':
                    node = regex[5][node]
                case 'N':
                    node = regex[6][node]
                case 'L':
                    node = regex[7][node]
                case _:
                    node = regex[8][node]
        elif symbol.isdigit():
            match symbol:
                case 1:
                    node = regex[9][node]
                case _:
                    node = regex[10][node]
        else:
            match symbol:
                case '(':
                    node = regex[11][node]
                case ')':
                    node = regex[12][node]
                case '>':
                    node = regex[13][node]
                case '=':
                    node = regex[14][node]
                case '+':
                    node = regex[15][node]
                case '%':
                    node = regex[16][node]
                case '.':
                    node = regex[17][node]
                case '<':
                    node = regex[18][node]
                case ' ':
                    node = regex[19][node]     
        i += 1
        if node < 100:
            continue
        elif node < 700:
            match node:
                case 100:
                    result += '100 '
                case 200:
                    result += '200 '
                case 300:
                    result += '300 '
                case 400:
                    result += '400 '
                case 501:
                    result += '501 '
                    repeat_place = i
                case 502:
                    result += '502 '
                    repeat_place = i
                case 503:
                    result += '503 '
                    repeat_place = i
                case 504:
                    result += '504 '
                    repeat_place = i
                case 505:
                    result += '505 '
                    repeat_place = i
                case 506:
                    result += '506 '
                    repeat_place = i
                case 507:
                    result += '507 '
                    repeat_place = i
                case 508:
                    result += '508 '
                    repeat_place = i
            if i > repeat_place:
                repeat_place = i
                i -= 1
            node = 0
        else:
            match node:
                case 801:
                    result = '801: Некорректный фрагмент цепочки'
                case 802:
                    result = '802: Ошибка в служебном слове '
                case 803:
                    result = '803: Ошибка в написании идентификатора'
                case 804:
                    result = '804: Ошибочная константа'
                case 805:
                    result = '805: Другая ошибка'
            return result
    return result.strip()